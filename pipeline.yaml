AWSTemplateFormatVersion: 2010-09-09

Description: "fargate-daemon-control-plane dev-pipeline"

Parameters:

  EnvName:
    Description: Environment prefix
    Type: String

Resources:

  # Pipeline artifact store
  PipelineArtifactBucket:
    Type: AWS::S3::Bucket
    # DeletionPolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
      AccessControl: LogDeliveryWrite
      VersioningConfiguration:
        Status: "Enabled"
      LoggingConfiguration:
        LogFilePrefix: "---s3-access-log---/"
      Tags:
        - Key: EnvName
          Value: !Ref EnvName

  # Role
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${PipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload


  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CFnDeployRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [cloudformation.amazonaws.com]
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess


  ### ECR

  # DaemonConRepo:
  #   Type: AWS::ECR::Repository
  #   Properties:
  #     # https://docs.aws.amazon.com/AmazonECR/latest/userguide/ecr_managed_policies.html
  #     # allows read and write access to repositories, but does not allow users to delete repositories or change the policy documents applied to them.
  #     RepositoryPolicyText: 
  #       Version: "2012-10-17"
  #       Statement:
  #         - Sid: ECRPowerUser
  #           Effect: Allow
  #           Principal: 
  #             AWS: 
  #               - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
  #           Action:
  #             - "ecr:GetAuthorizationToken"
  #             - "ecr:BatchCheckLayerAvailability"
  #             - "ecr:GetDownloadUrlForLayer"
  #             - "ecr:GetRepositoryPolicy"
  #             - "ecr:DescribeRepositories"
  #             - "ecr:ListImages"
  #             - "ecr:DescribeImages"
  #             - "ecr:BatchGetImage"
  #             - "ecr:InitiateLayerUpload"
  #             - "ecr:UploadLayerPart"
  #             - "ecr:CompleteLayerUpload"
  #             - "ecr:PutImage"


  ### CodeBuild

  ## Build

  # daemon.yaml
  PkgDaemonCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: "daemon-buildspec.yml" 
      Cache:
        Type: "NO_CACHE"
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:2.0
        ComputeType: BUILD_GENERAL1_MEDIUM
        PrivilegedMode: false
        EnvironmentVariables:
          - Name: PIPELINE_ARTIFACT_BUCKET
            Type: "PLAINTEXT"
            Value: !Ref PipelineArtifactBucket
      ServiceRole: !Ref CodeBuildServiceRole
      Tags:
        - Key: EnvName
          Value: !Ref EnvName

  PkgDaemonCodeBuildProjectStdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${PkgDaemonCodeBuildProject}"
      RetentionInDays: 731


  # Containers

  # DaemonContCodeBuildProject:
  #   Type: AWS::CodeBuild::Project
  #   Properties:
  #     Artifacts:
  #       Type: CODEPIPELINE
  #     Source:
  #       Type: CODEPIPELINE
  #       BuildSpec: "test-container/buildspec.yml" 
  #     Cache:
  #       Type: "NO_CACHE"
  #     Environment:
  #       Type: LINUX_CONTAINER
  #       Image: aws/codebuild/standard:2.0
  #       ComputeType: BUILD_GENERAL1_LARGE
  #       PrivilegedMode: true
  #       EnvironmentVariables:
  #         - Name: AWS_ACCOUNT_ID
  #           Type: "PLAINTEXT"
  #           Value: !Ref AWS::AccountId
  #         # - Name: REPOSITORY_NAME
  #         #   Type: "PLAINTEXT"
  #         #   Value: !Ref DaemonConRepo
  #     ServiceRole: !Ref CodeBuildServiceRole
  #     Tags:
  #       - Key: EnvName
  #         Value: !Ref EnvName

  # DaemonContCodeBuildProjectStdLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Sub "/aws/codebuild/${DaemonContCodeBuildProject}"
  #     RetentionInDays: 731

  ### Pipeline

  DaemonDevPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${EnvName}-daemon-dev
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactBucket
      RestartExecutionOnUpdate: false
      Stages:
        - Name: Source
          Actions:
            - Name: daemon
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: "1"
                Provider: GitHub
              Configuration:
                Owner: "ken-takehara"
                Repo: "fargate-daemon-control-plane"
                Branch: "develop"
                # OAuthToken: !Ref GitHubToken
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: RepoDaemon
              RunOrder: 1
        - Name: Build
          Actions:
            # - Name: build--daemon-container
            #   ActionTypeId:
            #     Category: Build
            #     Owner: AWS
            #     Version: "1"
            #     Provider: CodeBuild
            #   Configuration:
            #     ProjectName: !Ref DaemonContCodeBuildProject
            #   InputArtifacts:
            #     - Name: RepoDaemon
            #   OutputArtifacts:
            #     - Name: BuildDaemonCon
            #   RunOrder: 1
            - Name: pkg--daemon.yaml
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref PkgDaemonCodeBuildProject
              InputArtifacts:
                - Name: RepoDaemon
              OutputArtifacts:
                - Name: PkgDaemonCfn
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: deploy--daemon.yaml
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Configuration:
                ActionMode: "CREATE_UPDATE"
                StackName: !Sub ${EnvName}-daemon
                TemplatePath: "PkgDaemonCfn::daemon.yaml.packaged"
                Capabilities: "CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND"
                RoleArn: !GetAtt CFnDeployRole.Arn
                OutputFileName: "i.j"
                ParameterOverrides: !Sub |
                  {
                    "EnvName" : "${EnvName}"
                  }
              InputArtifacts:
                - Name: PkgDaemonCfn
                - Name: BuildDaemonCon
              OutputArtifacts:
                - Name: DepDaemonCfn
              RunOrder: 1

