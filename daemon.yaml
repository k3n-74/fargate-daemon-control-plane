AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: fargate-daemon-control-plane

Parameters:

  EnvName:
    Description: Environment prefix
    Type: String

Resources:

  ### VPC
  MainVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${EnvName}-vpc
        - Key: EnvName
          Value: !Ref EnvName

  ### Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvName}-rt
        - Key: EnvName
          Value: !Ref EnvName

  ### Subnets

  # Public a
  PubSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVpc
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: "ap-northeast-1a"
      Tags:
        - Key: Name
          Value: !Sub ${EnvName}-cluster-a
        - Key: EnvName
          Value: !Ref EnvName

  PubSubnetASubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetA
      RouteTableId: !Ref PublicRouteTable

  # Public c
  PubSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVpc
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: "ap-northeast-1c"
      Tags:
        - Key: Name
          Value: !Sub ${EnvName}-cluster-c
        - Key: EnvName
          Value: !Ref EnvName

  PubSubnetCSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetC
      RouteTableId: !Ref PublicRouteTable


  ### Internet Gateway
  MainInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvName}-igw
        - Key: EnvName
          Value: !Ref EnvName

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MainVpc
      InternetGatewayId: !Ref MainInternetGateway

  MainRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - MainInternetGateway
      - AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MainInternetGateway

  ### ECS Cluster

  # Daemon ECS Cluster
  DaemonEcsCluster:
    Type: AWS::ECS::Cluster

  ## Role
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEcsTaskExecutionRolePolicy

  ### Lambda

  ## Layer
  PublicModuleLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${EnvName}-fdcp-public-module"
      Description: "Public module dependencies for fargate daemon control plane"
      ContentUri: ./PublicModuleLayer/
      CompatibleRuntimes: 
        - python3.7
      RetentionPolicy: Retain

  PrivateModuleLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${EnvName}-fdcp-private-module"
      Description: "Private module dependencies for fargate daemon control plane"
      ContentUri: ./PrivateModuleLayer/
      CompatibleRuntimes: 
        - python3.7
      RetentionPolicy: Retain

  ## Function
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  StartDaemonFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./StartDaemonFunc
      Handler: "start_daemon_func.lambda_handler"
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      MemorySize: 512
      AutoPublishAlias: live
      Tracing: "Active"
      Layers:
        - !Ref PublicModuleLayer
        - !Ref PrivateModuleLayer
      Environment:
        Variables:
          EnvName: !Ref EnvName
          ClusterArn: !GetAtt DaemonEcsCluster.Arn
      Tags:
        EnvName: !Ref EnvName

  StartDaemonFuncStdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StartDaemonFunc}"
      RetentionInDays: 400

  StopDaemonFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./StopDaemonFunc
      Handler: "stop_daemon_func.lambda_handler"
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      MemorySize: 512
      AutoPublishAlias: live
      Tracing: "Active"
      Layers:
        - !Ref PublicModuleLayer
        - !Ref PrivateModuleLayer
      Environment:
        Variables:
          EnvName: !Ref EnvName
          ClusterArn: !GetAtt DaemonEcsCluster.Arn
      Tags:
        EnvName: !Ref EnvName

  StopDaemonFuncStdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StopDaemonFunc}"
      RetentionInDays: 400

  PrepareReplaceDaemonFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./PrepareReplaceDaemonFunc
      Handler: "prepare_replace_daemon_func.lambda_handler"
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      MemorySize: 512
      AutoPublishAlias: live
      Tracing: "Active"
      Layers:
        - !Ref PublicModuleLayer
        - !Ref PrivateModuleLayer
      Environment:
        Variables:
          EnvName: !Ref EnvName
          ClusterArn: !GetAtt DaemonEcsCluster.Arn
      Tags:
        EnvName: !Ref EnvName

  PrepareReplaceDaemonFuncStdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PrepareReplaceDaemonFunc}"
      RetentionInDays: 400

  CompleteReplaceDaemonFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./CompleteReplaceDaemonFunc
      Handler: "complete_replace_daemon_func.lambda_handler"
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      MemorySize: 512
      AutoPublishAlias: live
      Tracing: "Active"
      Layers:
        - !Ref PublicModuleLayer
        - !Ref PrivateModuleLayer
      Environment:
        Variables:
          EnvName: !Ref EnvName
          ClusterArn: !GetAtt DaemonEcsCluster.Arn
      Tags:
        EnvName: !Ref EnvName

  CompleteReplaceDaemonFuncStdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CompleteReplaceDaemonFunc}"
      RetentionInDays: 400

  DescribeDaemonFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./DescribeDaemonFunc
      Handler: "describe_daemon_func.lambda_handler"
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      MemorySize: 512
      AutoPublishAlias: live
      Tracing: "Active"
      Layers:
        - !Ref PublicModuleLayer
        - !Ref PrivateModuleLayer
      Environment:
        Variables:
          EnvName: !Ref EnvName
          ClusterArn: !GetAtt DaemonEcsCluster.Arn
      Tags:
        EnvName: !Ref EnvName

  DescribeDaemonFuncStdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DescribeDaemonFunc}"
      RetentionInDays: 400

  ListDaemonsFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./ListDaemonsFunc
      Handler: "list_daemons_func.lambda_handler"
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      MemorySize: 512
      AutoPublishAlias: live
      Tracing: "Active"
      Layers:
        - !Ref PublicModuleLayer
        - !Ref PrivateModuleLayer
      Environment:
        Variables:
          EnvName: !Ref EnvName
          ClusterArn: !GetAtt DaemonEcsCluster.Arn
      Tags:
        EnvName: !Ref EnvName

  ListDaemonsFuncStdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ListDaemonsFunc}"
      RetentionInDays: 400

  EcsEventListenerFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./EcsEventListenerFunc
      Handler: "ecs_event_listener_func.lambda_handler"
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      MemorySize: 512
      AutoPublishAlias: live
      Tracing: "Active"
      Layers:
        - !Ref PublicModuleLayer
        - !Ref PrivateModuleLayer
      Environment:
        Variables:
          EnvName: !Ref EnvName
          ClusterArn: !GetAtt DaemonEcsCluster.Arn
      Tags:
        EnvName: !Ref EnvName

  EcsEventListenerFuncStdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${EcsEventListenerFunc}"
      RetentionInDays: 400

  ### Events Rule

  EcsEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: EventRule
      EventPattern:
        source:
          - aws.ecs
        detail:
          clusterArn:
            - !GetAtt DaemonEcsCluster.Arn
      State: ENABLED
      Targets:
        - Arn: !GetAtt EcsEventListenerFunc.Arn
          Id: !Sub ${EcsEventListenerFunc}-target-id

  InvokePermissionForEcsEventRule:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref EcsEventListenerFunc
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EcsEventRule.Arn

  ### DynamoDB

  DaemonList:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${EnvName}-daemon-master"
      BillingMode: "PAY_PER_REQUEST"
      # ProvisionedThroughput:
      #   ReadCapacityUnits: 5
      #   WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: "daemon-id"
          AttributeType: "S"
        # - AttributeName: "task-arn"
        #   AttributeType: "S"
      KeySchema:
        - AttributeName: "daemon-id"
          KeyType: "HASH"
        # - AttributeName: "task-arn"
        #   KeyType: "RANGE"
      # PointInTimeRecoverySpecification:
      #   PointInTimeRecoveryEnabled: true
      # TimeToLiveSpecification:
      #   AttributeName: "ttl"
      #   Enabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: EnvName
          Value: !Ref EnvName

